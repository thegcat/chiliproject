require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe NewsController do
  let(:bob) {build :user}
  let(:admin) {create :user_admin}
  let(:project) {create :public_project}
  let(:news) {create :news, :project => project, :author => bob}

  before {User.current = nil}

  describe "GET /news" do
    before do
      news
      get :index
    end

    it {should respond_with :success}
    it {should render_template :index}
    it {should assign_to(:newss).with([news])}
    it {should_not assign_to(:project)}
  end

  describe "GET /projects/:project_id/news" do
    before do
      news
      get :index, :project_id => project.to_param
    end

    it {should respond_with :success}
    it {should render_template :index}
    it {should assign_to(:newss).with([news])}
    it {should assign_to(:project).with(project)}
  end

  describe "GET /news/:id" do
    context "with a valid :id" do
      before do
        get :show, :id => news.id
      end

      it {should respond_with :success}
      it {should render_template :show}
      # TODO rails-3.1: Move to view test
      #it {response.should have_tag "h2", :text => news.title}
    end

    context "with an invalid :id" do
      before do
        get :show, :id => 999
      end

      it {should respond_with :missing}
    end
  end

  describe "GET /projects/:project_id/news/new" do
    before do
      @request.session['user_id'] = admin.id
      get :new, :project_id => project.to_param
    end

    it {should respond_with :success}
    it {should render_template :new}
    it {should assign_to(:news).with_kind_of(News)}
    it {should assign_to(:project).with(project)}
  end

  describe "GET /news/:id/edit" do
    before do
      @request.session['user_id'] = admin.id
      get :edit, :id => news.id
    end

    it {should respond_with :success}
    it {should render_template :edit}
    it {should assign_to(:news).with(news)}
    it {should assign_to(:project).with(project)}
  end

  describe "POST /projects/:project_id/news" do
    let(:news_attributes) {attributes_for :news}
    let(:do_action) {@request.session['user_id'] = admin.id; post :create, :project_id => project.to_param, :news => news_attributes}

    context "with valid parameters" do
      before do
        do_action
      end

      it {should respond_with :redirect}
      it {should assign_to(:project)}
      it {should assign_to(:news).with_kind_of(News)}

      describe "the created news" do
        subject {assigns(:news)}

        it {should_not be_a_new(News).with(news_attributes)}
        it {should_not be_a_new(News).with(:project => project)}
        it {should_not be_a_new(News).with(:author => admin)}
      end

      it "should send an email"
      it {should set_the_flash.to l(:notice_successful_create)}
      it {should redirect_to project_news_index_path :project_id => project.to_param}
    end

    context "with invalid parameters" do
      before do
        News.any_instance.stub(:save).and_return(false)
        do_action
      end

      it {should respond_with :success}
      it {should assign_to(:project)}
      it {should assign_to(:news).with_kind_of(News)}

      describe "the new news" do
        subject {assigns(:news)}

        it {should be_a_new(News).with(news_attributes)}
        it {should be_a_new(News).with(:project_id => project.id)}
        it {should be_a_new(News).with(:author_id => admin.id)}
      end

      it {should_not set_the_flash}
      it {should render_template :new}
      # TODO rails-3.1: Move to view test
      #it {response.should have_tag "div#errorExplanation", :text => "1 error"}
    end
  end

  describe "PUT /news/:id" do
    let(:news_attributes) {attributes_for :news}
    let(:do_action) {@request.session['user_id'] = admin.id; put :update, :id => news, :news => news_attributes}

    context "with valid parameters" do
      before do
        do_action
      end

      it {should respond_with :redirect}
      it {should assign_to(:project)}
      it {should assign_to(:news).with_kind_of(News)}

      describe "the updated news" do
        subject {assigns(:news)}

        it {should_not be_a_new(News).with(news_attributes)}
      end

      it {should set_the_flash.to l(:notice_successful_update)}
      it {should redirect_to news_path news}
    end

    context "with invalid parameters" do
      before do
        News.any_instance.stub(:save).and_return(false)
        do_action
      end

      it {should respond_with :success}
      it {should assign_to(:project)}
      it {should assign_to(:news).with_kind_of(News)}

      describe "the updated news" do
        subject {assigns(:news)}

        it {should_not be_a_new(News).with(news_attributes)}
        # TODO: Find a better way to test for a not_saved object
        it {should be_changed}
      end

      it {should_not set_the_flash}
      it {should render_template :edit}
      # TODO rails-3.1: Move to view test
      #it {response.should have_tag "div#errorExplanation", :text => "1 error"}
    end
  end
  
  describe "DELETE /news/:id" do
    before do
      @request.session['user_id'] = admin.id
      delete :destroy, :id => news
    end
    
    it {should assign_to(:project)}
    it {should assign_to(:news)}
    
    describe "the news" do
      subject {assigns(:news)}
      
      it {should be_destroyed}
    end
    
    it {should redirect_to project_news_index_path :project_id => project}
  end
end
